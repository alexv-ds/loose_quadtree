name: CI

on: [ push, pull_request, workflow_dispatch ]

concurrency:
  group: "environment-${{github.ref}}"
  cancel-in-progress: true

env:
  CPM_SOURCE_CACHE: cpm-cache
  ACTION_CMAKE_VERSION: 3.21
  ACTION_NINJA_VERSION: latest
  CMAKE_CXX_COMPILER_LAUNCHER: ccache

defaults:
  run:
    shell: bash

jobs:
  tests_build_and_run:
    name: "${{ matrix.platform.name }} ${{ matrix.type.name }}"
    runs-on: "${{ matrix.platform.os }}"

    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: Linux GCC, os: ubuntu-22.04, flags: -GNinja -DCMAKE_CXX_COMPILER=g++ }
          - { name: Linux CLANG, os: ubuntu-22.04, flags: -GNinja -DCMAKE_CXX_COMPILER=clang++ }
          - { name: Windows VS2022, os: windows-2022, flags: -GNinja }
        type:
          - { name: Release }
          - { name: Debug }
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Visual Studio Architecture
        if: contains(matrix.platform.name, 'Windows VS')
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Get CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: ${{ env.ACTION_CMAKE_VERSION }}
          ninjaVersion: ${{ env.ACTION_NINJA_VERSION }}
          useLocalCache: true
          useCloudCache: true

      - name: Setup CCache
        uses: hendrikmuhs/ccache-action@v1.2.13
        with:
          verbose: 2
          key: "${{ matrix.platform.name }}-${{ matrix.type.name }}"

      - name: Setup CPM Cache
        uses: actions/cache@v3
        with:
          key: cpm-cache-${{ hashFiles('cmake/cpm-dependencies.cmake') }}
          path: ${{ env.CPM_SOURCE_CACHE }}
          enableCrossOsArchive: true

      - name: Configure CMake
        run: cmake -Bbuild -DCMAKE_BUILD_TYPE=${{ matrix.type.name }} ${{ matrix.platform.flags }}

      - name: Build
        run: cmake --build build --parallel --config ${{  matrix.type.name == 'Debug' && 'Debug' || 'Release' }}

      - name: Run Tests
        run: ctest --test-dir build

  code_coverage:
    name: Code Coverage
    needs: tests_build_and_run
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: ${{ env.ACTION_CMAKE_VERSION }}
          ninjaVersion: ${{ env.ACTION_NINJA_VERSION }}
          useLocalCache: true
          useCloudCache: true

      - name: Install gcovr
        uses: threeal/pipx-install-action@v1
        with:
          packages: gcovr

      - name: Setup CCache
        uses: hendrikmuhs/ccache-action@v1.2.13
        with:
          verbose: 2
          key: "coverage-ccache"

      - name: Setup CPM Cache
        uses: actions/cache@v3
        with:
          key: cpm-cache-${{ hashFiles('cmake/cpm-dependencies.cmake') }}
          path: ${{ env.CPM_SOURCE_CACHE }}
          enableCrossOsArchive: true

      - name: Configure CMake
        run: cmake -Bbuild -DCMAKE_BUILD_TYPE=Debug -DQUADTREE_CODE_COVERAGE=ON -DQUADTREE_CODE_COVERAGE_REPORT_XML=ON -DQUADTREE_CODE_COVERAGE_REPORT_HTML=OFF -DQUADTREE_CODE_COVERAGE_AUTORUN_TESTS=ON

      - name: Build
        run: cmake --build build --parallel

      - name: Make Coverage Report
        run: cmake --build build --target coverage_xml --parallel

      - name: Upload coverage report
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/coverage_xml.xml
          fail_ci_if_error: true



  valgrind_check:
    name: Valgrind Memcheck
    needs: tests_build_and_run
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Valgrind
        run: sudo apt-get update && sudo apt-get install valgrind

      - name: Get CMake and Ninja
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: ${{ env.ACTION_CMAKE_VERSION }}
          ninjaVersion: ${{ env.ACTION_NINJA_VERSION }}
          useLocalCache: true
          useCloudCache: true

      - name: Setup CCache
        uses: hendrikmuhs/ccache-action@v1.2.13
        with:
          verbose: 2
          key: "valgrind-ccache"

      - name: Setup CPM Cache
        uses: actions/cache@v3
        with:
          key: cpm-cache-${{ hashFiles('cmake/cpm-dependencies.cmake') }}
          path: ${{ env.CPM_SOURCE_CACHE }}
          enableCrossOsArchive: true

      - name: Configure CMake
        run: cmake -Bbuild -DCMAKE_BUILD_TYPE=Debug

      - name: Build
        run: cmake --build build --parallel

      - name: Valgrind Memcheck
        run: valgrind --error-exitcode=1 --leak-check=full ./build/tests_loose_quadtree
